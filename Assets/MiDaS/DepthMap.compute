// Copyright (c) 2025 Yupopyoi
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

#pragma kernel CSMain

// Buffers
StructuredBuffer<float> DepthInput;
RWStructuredBuffer<float> ColorOutput;

// Parameters
uint Width;
float MinDepth;
float MaxDepth;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{   
    uint2 pixelCoord = id.xy;

    uint index = pixelCoord.y * Width + pixelCoord.x;
    
    if (index < Width * Width)
    {
        // Normalisation of depth values (scaled from 0.0 to 1.0)
        float depth = DepthInput[index];
        float normalizedDepth = saturate((depth - MinDepth) / (MaxDepth - MinDepth));

        // Mapping Colors
        float red = normalizedDepth;
        float blue = 1.0 - normalizedDepth;
        ColorOutput[Width * Width * 0 + index] = red;
        ColorOutput[Width * Width * 1 + index] = 0.0f; // Green
        ColorOutput[Width * Width * 2 + index] = blue;
        ColorOutput[Width * Width * 3 + index] = 1.0f; // Alpha   
    }
}
